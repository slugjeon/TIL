git은 형상관리 도구이다. 프로젝트의 버젼관리도구이기도 하다 둘은 동의어
markdown을 활용한 문서작성
git을 활용한 버전관리
github를 활용한 포트폴리오 관리 및 개발 프로젝트 시나리오
마크다운은 가능한 이식성이 좋도록 최소한의 문법으로 구조화된다
단순 텍스트 문법으로 내용 작성하며 다양한 환경에서 변환하기 가능하다

타이포라가 마크다운 에디터
# 뭔가==헤딩 html태그와 대응되며 제목이나 소제목으로 사용되며
글자크기조정을 위해서 사용되서는 안된다. #을 1~6개까지 붙여서 html태그1~6까지
대응되며 크기도 조정된다.

list는 순서가 있는 리스트, 없는 리스트로 구성된다.
-하고 스페이스바 누르면 순서가 없는 리스트 만들어짐, 이후 목록에서 엔터+탭이면
소목록 생성가능
앞으로 가려면 쉬프트+탭

순서가 있는 리스트
그냥 1.으로 시작하면 된다.

fenced code block, ``` ```(숫자 1왼쪽에)
특정 언어를 명시하면 syntax highlighting기능이 적용,따라서 시인성이 좋다
마우스 클릭해서 코드블럭 탈출
inline code block은 ``안에 넣는다. 이경우에는 문법요소에 시인성 넣어줌

link는 url통해 링크 작성 가능. 파일 포함해 연결 시킬 수도 있음
대괄호에 글씨,그뒤의 소괄호에 url넣는다
!뒤에 대괄호,소괄호(경로)로 이미지 넣을 수 있음, 상대경로가 좋다.
./면 현재 폴더에서 시작한다. 경로가
인용문은> 넣는다.

타이포라에서는 table을 지원 control+t로 만듦,원래는 거지같아서 table만들기 어렵다.
text강조 hold,itatlic등을 통한 글자 강조
**는** 굵게
*사이*는 이텔릭
***는 수평선,

터미널,즉 cmd,및 gitbash다 cli라고 한다. command line interface
gui,graphic user interface와는 반대격
cli 를 제공하는 프로그램을 쎌혹은 명령 줄 해석기라고 부른다.

기초 명령어
pwd(print working directory)현재 디렉토리 출력
cd(디렉토리 이동) .이면 현재 디렉토리 ..은 상위 디렉토리
ls(list)목록
mkdir(make directory)디렉토리 생성
touch: 파일의 날짜와 시간을 수정한다(그냥쓰면 0바이트 빈파일 생성)
rm (remove)
다 명령어에서 스페이스바 한칸 띠고 함.
cd 어떤 디렉토리 하면 그 디렉토리로 이동
-r을 반복 의미 가지고 있으며, 단순 rm으로는 폴더가 지워지지 않는다.
rm -r 폴더이름으로 해야 전체 삭제됨. 내용물의 삭제를 반복한다는 의미인듯 
control+l로 커맨드 라인 지울 수 있음

git으로 버젼관리
버전은 컴퓨터 프로그램의 특정 상태
git 기초 흐름
컴퓨터 파일의 변경사항을 추적, 여러 사용자들 간에 해당 파일의 작업 조율
모든 히스토리를 클라이언트들이 공유. 원격 저장소를 통해 협업.

git init명령어로 저장소 만들면 이후의 변경사항을 git이 추적
숨김폴더로 만들어져 있다.
변경된 파일들을 add명령어로 모아서 임시저장소에 모아서
 commit해서 repository에 저장한다.

git add file은 working directory상의 변경 내용의 staging area에 추가하지 위해 사용하며
untracked 상태의 파일을 staged로, modified상태의 파일을 staged로 변경

commit한거 전부 .git폴더 안에 저장되어있다.
sha-1 해시를 사용해 40자 길이의 checksum을 생성하고 이를 통해 고유한 커밋 표시
$ git commit -m "commit message",로 하며 커밋 메세지는 명확하게 하나.

git은 데이터를 파일 시스템의 스냅샷(데이터 저장 장치의 상태를 별도의 파일이나 이미지로 저장)
으로 관리하고 매우 크기가 작다. 파일이 달라지지 않으면
성능을 위해 파일을 새로 저장하지는 않는다.

git status는 working directory와 stagin area의 상태확인
git log로 repository의 상태 확인,현재 저장소에 기록된 커밋을 조회하며
git log -1은 최근 하나 로그, git log --oneline은 한줄로 표시
git log -2면 최근 두개의 로그,

저장소 처음 만들때
$ git init

버전을 기록할 때
$ git add .
$ git commit -m '커밋메시지'

상태 확인할 때
$ git status : working directory, staging area
$ git log : 커밋 확인

로컬(노드)의 저장소의 commit을 원격저장소로 보내는개 push
가져오는게 pull
git remode add 이름 주소 로 특정주소를 이름으로 부르고
git push -u 이름 master(지금 현재위치의 git)으로 원격 저장소에 저장

원격 저장소와 버젼이 달라지면 pull해서 버젼을 합병해줘야함
merge conflict는 별도로 다뤄야 한다.
git remote -v로 원격 저장소의 정보 확인
이름 주소 꼴로 나온다
push는 원격 저장소 이름 브런치이름(master가 브런치이름)
pull도 저장소 이름 브런치이름
git clone 원격저장소 주소
이며 저장소를 복제해 모든 버전을 가져온다.
저장소 이름의 폴더로 이동해서 활용한다
따라서 pull로 가져온것과는 차이가 있다. 이건 그냥 복사이고 pull은 병합된다.
clone은 원격에 있는 프로젝트를 시작할떄 쓴다

버전관리를 하지 않는 파일은 git저장소에 .gitignore 파일을 생성해서 해당 내용을 관리
이미 커밋된 파일은 삭제를 해야되므로 시작전에 미리 설정해야
특정 파일, 특정 디렉토리,특정 확장자나 특정 예외등을
사전에 설정해서 예외로 관리